package com.shop.luxora.serviceImp;

import java.util.List;
import java.util.Optional;
import java.util.function.Function;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.repository.query.FluentQuery.FetchableFluentQuery;
import org.springframework.stereotype.Service;

import com.shop.luxora.entity.User;
import com.shop.luxora.repository.UserRepository;
import com.shop.luxora.service.UserService;


@Service
public class UserServiceImp implements UserService{
	
	private UserRepository userRepo;
	private static final String EMAIL_REGEX = "^[\\w.-]+@[\\w.-]+\\.[A-Za-z]{2,}$";
	private static final String MOBILE_NUMBER_REGEX = "^[6789]\\d{9}$";
	private static final String PASSWORD_REGEX = "^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{6,30}$";
	
	public UserServiceImp(UserRepository userRepo) {
		this.userRepo = userRepo;
	}

	@Override
	public List<User> saveAll(List<User> userlist) {
		if(userlist == null || userlist.isEmpty()) {
			throw new IllegalArgumentException("User List can't be null or empty.");
		}
		
		userlist.forEach(user -> {
			if(user.getFirstName()==null || user.getFirstName().isBlank()) {
				throw new IllegalArgumentException("User: "+user.getEmail()+", first name should not be null or empty.");
			} else if (user.getEmail()==null || user.getEmail().isBlank()) {
				throw new IllegalArgumentException("User: "+user.getEmail()+", email should not be null or empty.");
			} else if (!isEmailValid(user.getEmail())) {
				throw new IllegalArgumentException(user.getEmail()+": Email is not correctly patterned.");
			} else if (user.getMobileNo()==null || user.getMobileNo().isBlank()) {
				throw new IllegalArgumentException("User: "+user.getEmail()+", Mobile number should not be null or empty.");
			} else if (!isMobileNumberValid(user.getMobileNo())) {
				throw new IllegalArgumentException("Mobile number of user "+user.getFirstName()+" is not correct.");
			} else if (user.getPassword()==null || user.getPassword().isBlank()) {
				throw new IllegalArgumentException("Password should not be null or empty.");
			} else if (!isPasswordValid(user.getPassword())) {
				throw new IllegalArgumentException("Password should have at least one capital letter, one small letter, one number and one special charector(@$!%*?&) and length should be between 6 to 30.");
			}
		});
		
		try {
			return userRepo.saveAll(userlist);
		} catch(Exception ex) {
			throw new RuntimeException("Failed to save user list."+ ex.getMessage());
		}
	}

	@Override
	public List<User> findAll() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<User> findAllById(List<Long> ids) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public User save(User user) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Optional<User> findById(Long id) {
		// TODO Auto-generated method stub
		return Optional.empty();
	}

	@Override
	public boolean existsById(Long id) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public long count() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void deleteById(Long id) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void delete(User entity) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void deleteAllById(List<? extends Long> ids) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void deleteAll(List<? extends User> entities) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void deleteAll() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public List<User> findAll(Sort sort) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Page<User> findAll(Pageable pageable) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public <S extends User> Optional<S> findOne(Example<S> example) {
		// TODO Auto-generated method stub
		return Optional.empty();
	}

	@Override
	public <S extends User> Page<S> findAll(Example<S> example, Pageable pageable) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public <S extends User> long count(Example<S> example) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public <S extends User> boolean exists(Example<S> example) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public <S extends User, R> R findBy(Example<S> example, Function<FetchableFluentQuery<S>, R> queryFunction) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void flush() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public <S extends User> S saveAndFlush(S entity) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public <S extends User> List<S> saveAllAndFlush(List<S> entities) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void deleteAllInBatch(List<User> entities) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void deleteAllByIdInBatch(List<Long> ids) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void deleteAllInBatch() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public User getOne(Long id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public User getById(Long id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public User getReferenceById(Long id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<User> findAll(Example<User> example) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<User> findAll(Example<User> example, Sort sort) {
		// TODO Auto-generated method stub
		return null;
	}
	
	public static boolean isEmailValid(String email) { 
		Pattern pattern = Pattern.compile(EMAIL_REGEX);
		Matcher matcher = pattern.matcher(email);
		return matcher.matches();
	}
	
	public static boolean isMobileNumberValid(String mobileNumber) { 
		Pattern pattern = Pattern.compile(MOBILE_NUMBER_REGEX); 
		Matcher matcher = pattern.matcher(mobileNumber); 
		return matcher.matches(); 
	}
	
	public static boolean isPasswordValid(String password) { 
		Pattern pattern = Pattern.compile(PASSWORD_REGEX); 
		Matcher matcher = pattern.matcher(password); 
		return matcher.matches(); 
	}
	


}
