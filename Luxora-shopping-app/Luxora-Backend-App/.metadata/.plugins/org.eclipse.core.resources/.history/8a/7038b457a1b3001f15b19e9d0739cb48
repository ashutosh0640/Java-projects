package com.shop.luxora.service;

import java.util.List;
import java.util.Optional;
import java.util.function.Function;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.repository.query.FluentQuery.FetchableFluentQuery;

import com.shop.luxora.entity.User;

public interface UserService {
	
	
	public List<User> saveAll(Iterable<User> userlist);

	
	public List<User> findAll();

	
	public List<User> findAllById(Iterable<Integer> ids);

	
	public <S extends User> S save(S entity);

	
	public Optional<User> findById(Integer id);

	
	public boolean existsById(Integer id);

	
	public long count();

	
	public void deleteById(Integer id);

	
	public void delete(User entity);

	
	public void deleteAllById(Iterable<? extends Integer> ids);

	
	public void deleteAll(Iterable<? extends User> entities);

	
	public void deleteAll();

	
	public List<User> findAll(Sort sort);

	
	public Page<User> findAll(Pageable pageable);

	
	public <S extends User> Optional<S> findOne(Example<S> example);

	
	public <S extends User> Page<S> findAll(Example<S> example, Pageable pageable);

	
	public <S extends User> long count(Example<S> example);

	
	public <S extends User> boolean exists(Example<S> example);

	
	public <S extends User, R> R findBy(Example<S> example, Function<FetchableFluentQuery<S>, R> queryFunction);

	
	public void flush();

	
	public <S extends User> S saveAndFlush(S entity);

	
	public <S extends User> List<S> saveAllAndFlush(Iterable<S> entities);

	
	public void deleteAllInBatch(Iterable<User> entities);

	
	public void deleteAllByIdInBatch(Iterable<Integer> ids);

	
	public void deleteAllInBatch();

	
	public User getOne(Integer id);

	
	public User getById(Integer id);

	
	public User getReferenceById(Integer id);

	
	public <S extends User> List<S> findAll(Example<S> example);

	
	public <S extends User> List<S> findAll(Example<S> example, Sort sort);


}
