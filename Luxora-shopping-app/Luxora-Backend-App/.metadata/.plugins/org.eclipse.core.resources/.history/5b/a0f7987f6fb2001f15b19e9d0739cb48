package com.shop.luxora.serviceImp;

import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.shop.luxora.entity.Role;
import com.shop.luxora.repository.RoleRepository;
import com.shop.luxora.service.RoleService;

import jakarta.persistence.EntityNotFoundException;

@Service
public class RoleServiceImp implements RoleService {

	private RoleRepository roleRepo;

	public RoleServiceImp(RoleRepository roleRepo) {
		this.roleRepo = roleRepo;
	}

	@Override
	@Transactional
	public List<Role> saveAll(List<Role> roles) {
		if (roles == null || roles.isEmpty()) {
			throw new IllegalArgumentException("Role list cannot be null or empty");
		}

		roles.forEach(role -> {
			if (role.getName() == null || role.getName().isEmpty()) {
				throw new IllegalArgumentException("Role name cannot be null or empty");
			}
		});

		try {
			return roleRepo.saveAll(roles);
		} catch (Exception e) {
			throw new RuntimeException("Failed to save roles: " + e.getMessage(), e);
		}
	}

	@Override
	public List<Role> findAll() {
		try {
			return roleRepo.findAll();
		} catch (Exception e) {
			throw new RuntimeException("Failed to find roles: " + e.getMessage(), e);
		}
	}

	@Override
	public List<Role> findAllById(Iterable<Integer> ids) {
		List<Role> roles = roleRepo.findAllById(ids);
		if (roles.isEmpty()) {
			throw new EntityNotFoundException("No roles found for the given IDs: " + ids);
		}
		return roles;
	}

	@Override
	public Role save(Role role) {
		if (role == null || role.getName().isEmpty()) {
			throw new IllegalArgumentException("Role can not be null or empty.");
		}

		try {
			return roleRepo.save(role);
		} catch (Exception e) {
			throw new RuntimeException("Fail to save role.");
		}
	}

	/**
	 * Find a Role by its ID.
	 * 
	 * @param id the ID of the Role.
	 * @return Optional containing the Role if found, or empty Optional otherwise.
	 */
	@Override
	public Optional<Role> findById(Integer id) {
		if (id == null || id <= 0) {
			throw new IllegalArgumentException("ID must be a positive integer.");
		}
		return roleRepo.findById(id);
	}

	/*
	 * Check ID exists or not.
	 * 
	 * @param id the ID of the Role.
	 * @return true, if ID exists. false if ID not exists.
	 * */
	@Override
	public boolean existsById(Integer id) {
		// TODO Auto-generated method stub
		return false;
	}

}
